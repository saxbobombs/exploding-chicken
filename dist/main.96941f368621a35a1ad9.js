(()=>{"use strict";var t={982:(t,e,n)=>{n.d(e,{Z:()=>s});var r=n(15),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([t.id,"* {\r\n    margin:0;\r\n    padding:0;\r\n}\r\nhtml,body{\r\n    width:100%;\r\n    height:100%;\r\n}\r\ncanvas{\r\n    box-shadow:0 0 2px red;\r\n}\r\n\r\n#options{\r\n    position:absolute;\r\n    top:10px;\r\n    left:10px;\r\n    background:#fff;\r\n    padding:10px;\r\n    border:1px solid #555;\r\n}\r\n\r\n#options input{\r\n    margin-right:5px;\r\n}\r\n","",{version:3,sources:["webpack://./src/style/style.css"],names:[],mappings:"AAAA;IACI,QAAQ;IACR,SAAS;AACb;AACA;IACI,UAAU;IACV,WAAW;AACf;AACA;IACI,sBAAsB;AAC1B;;AAEA;IACI,iBAAiB;IACjB,QAAQ;IACR,SAAS;IACT,eAAe;IACf,YAAY;IACZ,qBAAqB;AACzB;;AAEA;IACI,gBAAgB;AACpB",sourcesContent:["* {\r\n    margin:0;\r\n    padding:0;\r\n}\r\nhtml,body{\r\n    width:100%;\r\n    height:100%;\r\n}\r\ncanvas{\r\n    box-shadow:0 0 2px red;\r\n}\r\n\r\n#options{\r\n    position:absolute;\r\n    top:10px;\r\n    left:10px;\r\n    background:#fff;\r\n    padding:10px;\r\n    border:1px solid #555;\r\n}\r\n\r\n#options input{\r\n    margin-right:5px;\r\n}\r\n"],sourceRoot:""}]);const s=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);r&&i[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,i=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],a=i[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),h="/*# ".concat(c," */"),p=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[o].concat(p).concat([h]).join("\n")}return[o].join("\n")}},379:(t,e,n)=>{var r,i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),o=[];function a(t){for(var e=-1,n=0;n<o.length;n++)if(o[n].identifier===t){e=n;break}return e}function s(t,e){for(var n={},r=[],i=0;i<t.length;i++){var s=t[i],c=e.base?s[0]+e.base:s[0],h=n[c]||0,p="".concat(c," ").concat(h);n[c]=h+1;var u=a(p),l={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(o[u].references++,o[u].updater(l)):o.push({identifier:p,updater:v(l,e),references:1}),r.push(p)}return r}function c(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var a=i(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var h,p=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function u(t,e,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=p(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}function l(t,e,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var d=null,f=0;function v(t,e){var n,r,i;if(e.singleton){var o=f++;n=d||(d=c(e)),r=u.bind(null,n,o,!1),i=u.bind(null,n,o,!0)}else n=c(e),r=l.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var i=a(n[r]);o[i].references--}for(var c=s(t,e),h=0;h<n.length;h++){var p=a(n[h]);0===o[p].references&&(o[p].updater(),o.splice(p,1))}n=c}}}},937:(t,e,n)=>{t.exports=n.p+"86ec21ec2ad0c08d08b5.png"}},e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{var t=n(379),e=n.n(t),r=n(982);e()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;const i=new function(){this.fps=30,this.showChickenPath=!1},o=function(){function t(){}return t.getRandom=function(t,e){return Math.floor(Math.random()*(e-t+1)+t)},t.debounce=function(t,e,n){var r;return void 0===e&&(e=void 0),void 0===n&&(n=void 0),function(){var i=this,o=arguments,a=function(){r=null,n||t.apply(i,o)},s=n&&!r;clearTimeout(r),r=setTimeout(a,e),s&&t.apply(i,o)}},t}(),a=function(){function t(){this._tickCounter=1,this._events={},t._viewCounter++,this._viewId=t._viewCounter.toString()}return t.prototype.getId=function(){return this._viewId},t.prototype.tick=function(){this._tickCounter++,this._tickCounter>i.fps&&(this._tickCounter=1)},t.prototype.on=function(t,e){this._events[t]||(this._events[t]=[]),this._events[t].push(e)},t.prototype.fireEvent=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=[].slice.call(arguments),r=n.shift();for(var i in this._events)if(i===r)for(var o=this._events[i],a=0;a<o.length;a++)o[a].apply(this,n)},t._viewCounter=0,t}();var s,c=n(937),h=(s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const p=function(t){function e(e){var n=t.call(this)||this;n.sprite=new Image,n.helperCanvas=document.createElement("canvas"),n.sprites={right:[[66,22],[98,22],[130,24],[162,24]],left:[[64,90],[96,89],[128,88],[160,88]],explosion:[[240,22],[205,22],[23,87],[23,56],[23,20]]},n.path=[],n.exploding=!1,n.helperCanvas.width=e.width,n.helperCanvas.height=e.height,n.screen=e.screen,n.helperContext=n.helperCanvas.getContext("2d"),n.currentSpritePos=0;var r=n.screen.getBorders();return n.currentPathX=o.getRandom(0,r.right-n.helperCanvas.width),n.currentPathY=o.getRandom(0,r.bottom-n.helperCanvas.height),n.sprite.src=c,n._drawChicken(),n}return h(e,t),e.prototype._createPath=function(t,e){var n=this.currentPathX,r=this.currentPathY;this.directionX=!1!==t?t:o.getRandom(-1,1),this.directionY=!1!==e?e:o.getRandom(-1,1);for(var i=0;i<o.getRandom(1,1e4);i++){var a=n+i*this.directionX,s=r+i*this.directionY;this.path.push({x:a,y:s})}this.fireEvent("pathCreated",this.path)},e.prototype._getPath=function(){var t=this.screen.getBorders();0==this.path.length&&this._createPath(!1,!1);var e=this.path.shift(),n=!1,r=!1;return e.x<t.left&&(n=o.getRandom(0,1)),e.x+this.helperCanvas.width>t.right&&(n=o.getRandom(-1,0)),e.y<t.top&&(r=o.getRandom(0,1)),e.y+this.helperCanvas.height>t.bottom&&(r=o.getRandom(-1,0)),!1===n&&!1===r||(this.path=[],this._createPath(n,r),e=this.path.shift()),e},e.prototype.tick=function(){t.prototype.tick.call(this);var e=!1;this.isExploding()?(this._tickCounter%3==0&&(e=!0,this.currentSpritePos++),this.currentSpritePos>=5&&(this.currentSpritePos=0)):(this._tickCounter%10==0&&(e=!0,this.currentSpritePos++),this.currentSpritePos>=4&&(this.currentSpritePos=0)),e&&this._drawChicken()},e.prototype._drawChicken=function(){var t;t=this.directionX>=0?this.sprites.right[this.currentSpritePos]:this.sprites.left[this.currentSpritePos],this.exploding&&(t=this.sprites.explosion[this.currentSpritePos]),this.helperContext.clearRect(0,0,this.helperCanvas.width,this.helperCanvas.height),this.helperContext.drawImage(this.sprite,-1*t[0],-1*t[1])},e.prototype.explode=function(){this.currentSpritePos=-1,this.exploding=!0,this.path=[],this.fireEvent("explosionStart",this.getId())},e.prototype.isExploding=function(){return this.exploding},e.prototype.get=function(){var t=[];return this.isExploding()||(t=this._getPath(),this.currentPathX=t.x,this.currentPathY=t.y),this.isExploding()&&4==this.currentSpritePos?(this.fireEvent("explosionEnd"),!1):{img:this.helperCanvas,x:this.currentPathX,y:this.currentPathY,width:this.helperCanvas.width,height:this.helperCanvas.height}},e}(a);var u=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const l=function(t){function e(e,n){var r=t.call(this)||this;r.chickens=[];var i=r;return i.options=n,i.canvas=document.createElement("canvas"),i.canvas.width=e.clientWidth,i.canvas.height=e.clientHeight,i.context=i.canvas.getContext("2d"),i.canvas.addEventListener("mousedown",(function(t){return i.hunt(t)})),i.screenDestEl=e,i.screenDestEl.appendChild(i.get()),window.addEventListener("resize",o.debounce((function(){i.canvas.width=i.screenDestEl.clientWidth,i.canvas.height=i.screenDestEl.clientHeight}))),r}return u(e,t),e.prototype.clear=function(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)},e.prototype.insert=function(t){var e=this;e.chickens.push(t),t.on("explosionEnd",(function(){e.fireEvent("chickenExploded")}))},e.prototype.tick=function(){for(var t=this,e=[],n=0;n<t.chickens.length;n++){var r=t.chickens[n];r.tick();var i=r.get();!1!==i?(t.options.showChickenPath&&r.path.length>0&&(t.context.beginPath(),t.context.moveTo(r.path[0].x+15,r.path[0].y+15),t.context.lineTo(r.path[r.path.length-1].x+15,r.path[r.path.length-1].y+15),t.context.lineTo(r.path[0].x+15,r.path[0].y+15),t.context.closePath(),t.context.strokeStyle="#777",t.context.stroke()),t.context.drawImage(i.img,i.x,i.y)):e.push(n)}t.chickens=t.chickens.filter((function(t,n){return-1==e.indexOf(n)}))},e.prototype.getBorders=function(){return{top:0,left:0,bottom:this.canvas.height,right:this.canvas.width}},e.prototype.get=function(){return this.canvas},e.prototype.hunt=function(t){for(var e=t.pageX,n=t.pageY,r=0;r<this.chickens.length;r++){var i=this.chickens[r],o=i.get();if(o){var a=!1,s=!1;if(o.x<e&&o.x+o.width>e&&(a=!0),o.y<n&&o.y+o.height>n&&(s=!0),a&&s&&!i.isExploding()){i.explode();break}}}},e}(a),d=function(){function t(t,e){var n=this;n.element=document.createElement("div"),n.element.id="options",t.appendChild(n.element),n.options=e,n._addOption("showChickenPath","show chicken paths",e.showChickenPath)}return t.prototype._addOption=function(t,e,n){var r=this,i=document.createElement("label"),o=document.createElement("input");o.type="checkbox",n&&(o.checked=!0),i.appendChild(o),i.appendChild(document.createTextNode(e)),o.name=t,o.addEventListener("click",(function(){r.options[t]=o.checked})),this.element.appendChild(i)},t}();var f;function v(t){for(var e=0;e<t;e++)f.insert(new p({width:31,height:31,screen:f}))}function g(){setTimeout((function(){requestAnimationFrame(g),f.clear(),f.tick()}),1e3/i.fps)}window.addEventListener("load",(function(){var t=this;t.options={showChickenPath:i.showChickenPath},f=new l(document.body,t.options),new d(document.body,t.options),f.on("chickenExploded",(function(){v(1)})),v(10),g()}),!1)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,