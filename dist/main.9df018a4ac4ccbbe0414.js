(()=>{"use strict";var t={982:(t,e,n)=>{n.d(e,{Z:()=>c});var r=n(15),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,"* {\r\n    margin:0;\r\n    padding:0;\r\n}\r\nhtml,body{\r\n    width:100%;\r\n    height:100%;\r\n}\r\ncanvas{\r\n    box-shadow:0 0 2px red;\r\n}\r\n\r\n#options{\r\n    position:absolute;\r\n    top:10px;\r\n    left:10px;\r\n    background:#fff;\r\n    padding:10px;\r\n    border:1px solid #555;\r\n}\r\n\r\n#options input{\r\n    margin-right:5px;\r\n}\r\n","",{version:3,sources:["webpack://./src/style/style.css"],names:[],mappings:"AAAA;IACI,QAAQ;IACR,SAAS;AACb;AACA;IACI,UAAU;IACV,WAAW;AACf;AACA;IACI,sBAAsB;AAC1B;;AAEA;IACI,iBAAiB;IACjB,QAAQ;IACR,SAAS;IACT,eAAe;IACf,YAAY;IACZ,qBAAqB;AACzB;;AAEA;IACI,gBAAgB;AACpB",sourcesContent:["* {\r\n    margin:0;\r\n    padding:0;\r\n}\r\nhtml,body{\r\n    width:100%;\r\n    height:100%;\r\n}\r\ncanvas{\r\n    box-shadow:0 0 2px red;\r\n}\r\n\r\n#options{\r\n    position:absolute;\r\n    top:10px;\r\n    left:10px;\r\n    background:#fff;\r\n    padding:10px;\r\n    border:1px solid #555;\r\n}\r\n\r\n#options input{\r\n    margin-right:5px;\r\n}\r\n"],sourceRoot:""}]);const c=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<t.length;c++){var s=[].concat(t[c]);r&&o[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),e.push(s))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,o=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=t[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),h="/*# ".concat(s," */"),p=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[i].concat(p).concat([h]).join("\n")}return[i].join("\n")}},379:(t,e,n)=>{var r,o=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),i=[];function a(t){for(var e=-1,n=0;n<i.length;n++)if(i[n].identifier===t){e=n;break}return e}function c(t,e){for(var n={},r=[],o=0;o<t.length;o++){var c=t[o],s=e.base?c[0]+e.base:c[0],h=n[s]||0,p="".concat(s," ").concat(h);n[s]=h+1;var u=a(p),l={css:c[1],media:c[2],sourceMap:c[3]};-1!==u?(i[u].references++,i[u].updater(l)):i.push({identifier:p,updater:v(l,e),references:1}),r.push(p)}return r}function s(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var a=o(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var h,p=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function u(t,e,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=p(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function l(t,e,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var d=null,f=0;function v(t,e){var n,r,o;if(e.singleton){var i=f++;n=d||(d=s(e)),r=u.bind(null,n,i,!1),o=u.bind(null,n,i,!0)}else n=s(e),r=l.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=c(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var o=a(n[r]);i[o].references--}for(var s=c(t,e),h=0;h<n.length;h++){var p=a(n[h]);0===i[p].references&&(i[p].updater(),i.splice(p,1))}n=s}}}},937:(t,e,n)=>{t.exports=n.p+"86ec21ec2ad0c08d08b5.png"}},e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={id:r,exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{var t=n(379),e=n.n(t),r=n(982);e()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;const o=new function(){this.fps=30,this.showChickenPath=!1},i=function(){function t(t,e){this._x=t,this._y=e}return Object.defineProperty(t.prototype,"x",{get:function(){return this._x},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this._y},enumerable:!1,configurable:!0}),t}(),a=function(){function t(){}return t.getStraightPathToPoint=function(t,e){for(var n=[],r=t.x,o=t.y,a=e.x,c=e.y,s=Math.abs(a-r),h=r<a?1:-1,p=-1*Math.abs(c-o),u=o<c?1:-1,l=s+p;r!=a||o!=c;){var d=2*l;d>=p&&(l+=p,r+=h),d<=s&&(l+=s,o+=u),n.push(new i(r,o))}return n},t.getRandom=function(t,e){return Math.floor(Math.random()*(e-t+1)+t)},t.debounce=function(t,e,n){var r;return void 0===e&&(e=void 0),void 0===n&&(n=void 0),function(){var o=this,i=arguments,a=function(){r=null,n||t.apply(o,i)},c=n&&!r;clearTimeout(r),r=setTimeout(a,e),c&&t.apply(o,i)}},t}(),c=function(){function t(){this._tickCounter=1,this._events={},t._viewCounter++,this._viewId=t._viewCounter.toString()}return t.prototype.getId=function(){return this._viewId},t.prototype.tick=function(){this._tickCounter++,this._tickCounter>o.fps&&(this._tickCounter=1)},t.prototype.on=function(t,e){this._events[t]||(this._events[t]=[]),this._events[t].push(e)},t.prototype.fireEvent=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=[].slice.call(arguments),r=n.shift();for(var o in this._events)if(o===r)for(var i=this._events[o],a=0;a<i.length;a++)i[a].apply(this,n)},t._viewCounter=0,t}();var s,h=n(937),p=(s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const u=function(t){function e(e){var n=t.call(this)||this;n.sprite=new Image,n.helperCanvas=document.createElement("canvas"),n.sprites={right:[[66,22],[98,22],[130,24],[162,24]],left:[[64,90],[96,89],[128,88],[160,88]],explosion:[[240,22],[205,22],[23,87],[23,56],[23,20]]},n.path=[],n.exploding=!1,n.helperCanvas.width=e.width,n.helperCanvas.height=e.height,n.screen=e.screen,n.helperContext=n.helperCanvas.getContext("2d"),n.currentSpritePos=0;var r=n.screen.getBorders();return n.currentPathX=a.getRandom(0,r.right-n.helperCanvas.width),n.currentPathY=a.getRandom(0,r.bottom-n.helperCanvas.height),n.sprite.src=h,n._drawChicken(),n}return p(e,t),e.prototype._createPath=function(){for(var t=this.currentPathX,e=this.currentPathY,n=null,r=null,o=[],c=0;c<a.getRandom(1,4);c++)n=r||new i(t,e),r=new i(a.getRandom(0,1e3),a.getRandom(0,1e3)),o=o.concat(a.getStraightPathToPoint(n,r));this.path=o,this.fireEvent("pathCreated",this.path)},e.prototype._getPath=function(){var t=this.screen.getBorders();0==this.path.length&&this._createPath();var e=this.path.shift(),n=!1,r=!1;return e.x<t.left&&(n=a.getRandom(0,1)),e.x+this.helperCanvas.width>t.right&&(n=a.getRandom(-1,0)),e.y<t.top&&(r=a.getRandom(0,1)),e.y+this.helperCanvas.height>t.bottom&&(r=a.getRandom(-1,0)),!1===n&&!1===r||(this.path=[],this._createPath(),e=this.path.shift()),e},e.prototype.tick=function(){t.prototype.tick.call(this);var e=!1;this.isExploding()?(this._tickCounter%3==0&&(e=!0,this.currentSpritePos++),this.currentSpritePos>=5&&(this.currentSpritePos=0)):(this._tickCounter%10==0&&(e=!0,this.currentSpritePos++),this.currentSpritePos>=4&&(this.currentSpritePos=0)),e&&this._drawChicken()},e.prototype._drawChicken=function(){var t;t=this.directionX>=0?this.sprites.right[this.currentSpritePos]:this.sprites.left[this.currentSpritePos],this.exploding&&(t=this.sprites.explosion[this.currentSpritePos]),this.helperContext.clearRect(0,0,this.helperCanvas.width,this.helperCanvas.height),this.helperContext.drawImage(this.sprite,-1*t[0],-1*t[1])},e.prototype.explode=function(){this.currentSpritePos=-1,this.exploding=!0,this.path=[],this.fireEvent("explosionStart",this.getId())},e.prototype.isExploding=function(){return this.exploding},e.prototype.get=function(){var t=[];return this.isExploding()||(t=this._getPath(),this.currentPathX=t.x,this.currentPathY=t.y),this.isExploding()&&4==this.currentSpritePos?(this.fireEvent("explosionEnd"),!1):{img:this.helperCanvas,x:this.currentPathX,y:this.currentPathY,width:this.helperCanvas.width,height:this.helperCanvas.height}},e}(c);var l=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const d=function(t){function e(e,n){var r=t.call(this)||this;r.chickens=[];var o=r;return o.options=n,o.canvas=document.createElement("canvas"),o.canvas.width=e.clientWidth,o.canvas.height=e.clientHeight,o.context=o.canvas.getContext("2d"),o.canvas.addEventListener("mousedown",(function(t){return o.hunt(t)})),o.screenDestEl=e,o.screenDestEl.appendChild(o.get()),window.addEventListener("resize",a.debounce((function(){o.canvas.width=o.screenDestEl.clientWidth,o.canvas.height=o.screenDestEl.clientHeight}))),r}return l(e,t),e.prototype.clear=function(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)},e.prototype.insert=function(t){var e=this;e.chickens.push(t),t.on("explosionEnd",(function(){e.fireEvent("chickenExploded")}))},e.prototype.tick=function(){for(var t=this,e=[],n=0;n<t.chickens.length;n++){var r=t.chickens[n];r.tick();var o=r.get();if(!1!==o){if(t.options.showChickenPath&&r.path.length>0){t.context.beginPath(),t.context.moveTo(r.path[0].x+15,r.path[0].y+15);for(var i=0;i<r.path.length;i++)t.context.lineTo(r.path[i].x+15,r.path[i].y+15);for(var a=r.path.length-1;a>0;a--)t.context.lineTo(r.path[a].x+15,r.path[a].y+15);t.context.lineTo(r.path[0].x+15,r.path[0].y+15),t.context.closePath(),t.context.strokeStyle="#777",t.context.stroke()}t.context.drawImage(o.img,o.x,o.y)}else e.push(n)}t.chickens=t.chickens.filter((function(t,n){return-1==e.indexOf(n)}))},e.prototype.getBorders=function(){return{top:0,left:0,bottom:this.canvas.height,right:this.canvas.width}},e.prototype.get=function(){return this.canvas},e.prototype.hunt=function(t){for(var e=t.pageX,n=t.pageY,r=0;r<this.chickens.length;r++){var o=this.chickens[r],i=o.get();if(i){var a=!1,c=!1;if(i.x<e&&i.x+i.width>e&&(a=!0),i.y<n&&i.y+i.height>n&&(c=!0),a&&c&&!o.isExploding()){o.explode();break}}}},e}(c),f=function(){function t(t,e){var n=this;n.element=document.createElement("div"),n.element.id="options",t.appendChild(n.element),n.options=e,n._addOption("showChickenPath","show chicken paths",e.showChickenPath)}return t.prototype._addOption=function(t,e,n){var r=this,o=document.createElement("label"),i=document.createElement("input");i.type="checkbox",n&&(i.checked=!0),o.appendChild(i),o.appendChild(document.createTextNode(e)),i.name=t,i.addEventListener("click",(function(){r.options[t]=i.checked})),this.element.appendChild(o)},t}();var v;function g(t){for(var e=0;e<t;e++)v.insert(new u({width:31,height:31,screen:v}))}function y(){setTimeout((function(){requestAnimationFrame(y),v.clear(),v.tick()}),1e3/o.fps)}window.addEventListener("load",(function(){var t=this;t.options={showChickenPath:o.showChickenPath},v=new d(document.body,t.options),new f(document.body,t.options),v.on("chickenExploded",(function(){g(1)})),g(10),y()}),!1)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,