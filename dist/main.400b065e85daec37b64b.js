(()=>{"use strict";var t={937:(t,e,r)=>{t.exports=r.p+"86ec21ec2ad0c08d08b5.png"}},e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={exports:{}};return t[n](i,i.exports,r),i.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var t;r.g.importScripts&&(t=r.g.location+"");var e=r.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=t})(),(()=>{const t=new function(){this.fps=60},e=function(){function t(){}return t.getRandom=function(t,e){return Math.floor(Math.random()*(e-t+1)+t)},t}(),n=function(){function e(){this._tickCounter=1,e._viewCounter++,this._viewId=e._viewCounter.toString()}return e.prototype.tick=function(){this._tickCounter++,this._tickCounter>t.fps&&(this._tickCounter=1)},e._viewCounter=0,e}();var i,o=r(937),s=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});const h=function(t){function r(r){var n=t.call(this)||this;n.sprite=new Image,n.helperCanvas=document.createElement("canvas"),n.sprites={right:[[66,22],[98,22],[130,24],[162,24]],left:[[64,90],[96,89],[128,88],[160,88]],explosion:[[240,22],[205,22],[23,87],[23,56],[23,20]]},n.path=[],n.exploding=!1,n.helperCanvas.width=r.width,n.helperCanvas.height=r.height,n.screen=r.screen,n.helperContext=n.helperCanvas.getContext("2d"),n.currentSpritePos=0;var i=n.screen.getBorders();return n.currentPathX=e.getRandom(0,i.right-n.helperCanvas.width),n.currentPathY=e.getRandom(0,i.bottom-n.helperCanvas.height),n.sprite.src=o,n._drawChicken(),n}return s(r,t),r.prototype._createPath=function(t,r){var n=this.currentPathX,i=this.currentPathY;this.directionX=!1!==t?t:e.getRandom(-1,1),this.directionY=!1!==r?r:e.getRandom(-1,1);for(var o=0;o<e.getRandom(1,1e3);o++){var s=n+o*this.directionX,h=i+o*this.directionY;this.path.push({x:s,y:h})}},r.prototype._getPath=function(){var t=this.screen.getBorders();0==this.path.length&&this._createPath(!1,!1);var r=this.path.shift(),n=!1,i=!1;return r.x<t.left&&(n=e.getRandom(0,1)),r.x+this.helperCanvas.width>t.right&&(n=e.getRandom(-1,0)),r.y<t.top&&(i=e.getRandom(0,1)),r.y+this.helperCanvas.height>t.bottom&&(i=e.getRandom(-1,0)),!1===n&&!1===i||(this.path=[],this._createPath(n,i),r=this.path.shift()),r},r.prototype.tick=function(){t.prototype.tick.call(this);var e=!1;this._tickCounter%10==0&&(e=!0,this.currentSpritePos++),this.exploding?this.currentSpritePos>=5&&(this.currentSpritePos=0):this.currentSpritePos>=4&&(this.currentSpritePos=0),e&&this._drawChicken()},r.prototype._drawChicken=function(){var t;t=this.directionX>=0?this.sprites.right[this.currentSpritePos]:this.sprites.left[this.currentSpritePos],this.exploding&&(t=this.sprites.explosion[this.currentSpritePos]),this.helperContext.clearRect(0,0,this.helperCanvas.width,this.helperCanvas.height),this.helperContext.drawImage(this.sprite,-1*t[0],-1*t[1])},r.prototype.explode=function(){this.currentSpritePos=0,this.exploding=!0},r.prototype.isExploding=function(){return this.exploding},r.prototype.get=function(){var t=this.helperCanvas,e=this._getPath();return this.exploding||(this.currentPathX=e.x,this.currentPathY=e.y),(!this.exploding||4!=this.currentSpritePos)&&{img:t,x:this.currentPathX,y:this.currentPathY,width:this.helperCanvas.width,height:this.helperCanvas.height}},r}(n);var c=function(){var t=function(e,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(e,r)};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const a=function(t){function e(e,r,n){var i=t.call(this)||this;return i.chickens=[],i.canvas=document.createElement("canvas"),i.canvas.height=e,i.canvas.width=r,i.context=i.canvas.getContext("2d"),i.canvas.addEventListener("mousedown",(function(t){return i.hunt(t)})),n.appendChild(i.get()),i}return c(e,t),e.prototype.clear=function(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)},e.prototype.insert=function(t){this.chickens.push(t)},e.prototype.tick=function(){for(var t=[],e=0;e<this.chickens.length;e++){var r=this.chickens[e];r.tick();var n=r.get();!1!==n?this.context.drawImage(n.img,n.x,n.y):t.push(e)}this.chickens=this.chickens.filter((function(e,r){return-1==t.indexOf(r)}))},e.prototype.getBorders=function(){return{top:0,left:0,bottom:this.canvas.height,right:this.canvas.width}},e.prototype.get=function(){return this.canvas},e.prototype.hunt=function(t){for(var e=t.pageX,r=t.pageY,n=0;n<this.chickens.length;n++){var i=this.chickens[n],o=i.get();if(o){var s=!1,h=!1;if(o.x<e&&o.x+o.width>e&&(s=!0),o.y<r&&o.y+o.height>r&&(h=!0),s&&h&&!i.isExploding()){i.explode();break}}}},e}(n);var p;function u(){setTimeout((function(){requestAnimationFrame(u),p.clear(),p.tick()}),1e3/t.fps)}window.addEventListener("load",(function(){p=new a(500,500,document.body),function(t){for(var e=0;e<10;e++)p.insert(new h({width:31,height:31,screen:p}))}(),u()}),!1)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,