(()=>{"use strict";var t={982:(t,e,n)=>{n.d(e,{Z:()=>c});var r=n(15),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([t.id,"* {\r\n    margin:0;\r\n    padding:0;\r\n}\r\nhtml,body{\r\n    width:100%;\r\n    height:100%;\r\n}\r\ncanvas{\r\n    box-shadow:0 0 2px red;\r\n}","",{version:3,sources:["webpack://./src/style/style.css"],names:[],mappings:"AAAA;IACI,QAAQ;IACR,SAAS;AACb;AACA;IACI,UAAU;IACV,WAAW;AACf;AACA;IACI,sBAAsB;AAC1B",sourcesContent:["* {\r\n    margin:0;\r\n    padding:0;\r\n}\r\nhtml,body{\r\n    width:100%;\r\n    height:100%;\r\n}\r\ncanvas{\r\n    box-shadow:0 0 2px red;\r\n}"],sourceRoot:""}]);const c=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var c=0;c<t.length;c++){var s=[].concat(t[c]);r&&i[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),e.push(s))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,i=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,c=t[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==c.return||c.return()}finally{if(i)throw o}}return n}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],a=i[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),h="/*# ".concat(s," */"),u=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[o].concat(u).concat([h]).join("\n")}return[o].join("\n")}},379:(t,e,n)=>{var r,i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),o=[];function a(t){for(var e=-1,n=0;n<o.length;n++)if(o[n].identifier===t){e=n;break}return e}function c(t,e){for(var n={},r=[],i=0;i<t.length;i++){var c=t[i],s=e.base?c[0]+e.base:c[0],h=n[s]||0,u="".concat(s," ").concat(h);n[s]=h+1;var p=a(u),l={css:c[1],media:c[2],sourceMap:c[3]};-1!==p?(o[p].references++,o[p].updater(l)):o.push({identifier:u,updater:v(l,e),references:1}),r.push(u)}return r}function s(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var a=i(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var h,u=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function p(t,e,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=u(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}function l(t,e,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var d=null,f=0;function v(t,e){var n,r,i;if(e.singleton){var o=f++;n=d||(d=s(e)),r=p.bind(null,n,o,!1),i=p.bind(null,n,o,!0)}else n=s(e),r=l.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=c(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var i=a(n[r]);o[i].references--}for(var s=c(t,e),h=0;h<n.length;h++){var u=a(n[h]);0===o[u].references&&(o[u].updater(),o.splice(u,1))}n=s}}}},937:(t,e,n)=>{t.exports=n.p+"86ec21ec2ad0c08d08b5.png"}},e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{var t=n(379),e=n.n(t),r=n(982);e()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;const i=new function(){this.fps=60},o=function(){function t(){}return t.getRandom=function(t,e){return Math.floor(Math.random()*(e-t+1)+t)},t.debounce=function(t,e,n){var r;return void 0===e&&(e=void 0),void 0===n&&(n=void 0),function(){var i=this,o=arguments,a=function(){r=null,n||t.apply(i,o)},c=n&&!r;clearTimeout(r),r=setTimeout(a,e),c&&t.apply(i,o)}},t}(),a=function(){function t(){this._tickCounter=1,t._viewCounter++,this._viewId=t._viewCounter.toString()}return t.prototype.tick=function(){this._tickCounter++,this._tickCounter>i.fps&&(this._tickCounter=1)},t._viewCounter=0,t}();var c,s=n(937),h=(c=function(t,e){return(c=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}c(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const u=function(t){function e(e){var n=t.call(this)||this;n.sprite=new Image,n.helperCanvas=document.createElement("canvas"),n.sprites={right:[[66,22],[98,22],[130,24],[162,24]],left:[[64,90],[96,89],[128,88],[160,88]],explosion:[[240,22],[205,22],[23,87],[23,56],[23,20]]},n.path=[],n.exploding=!1,n.helperCanvas.width=e.width,n.helperCanvas.height=e.height,n.screen=e.screen,n.helperContext=n.helperCanvas.getContext("2d"),n.currentSpritePos=0;var r=n.screen.getBorders();return n.currentPathX=o.getRandom(0,r.right-n.helperCanvas.width),n.currentPathY=o.getRandom(0,r.bottom-n.helperCanvas.height),n.sprite.src=s,n._drawChicken(),n}return h(e,t),e.prototype._createPath=function(t,e){var n=this.currentPathX,r=this.currentPathY;this.directionX=!1!==t?t:o.getRandom(-1,1),this.directionY=!1!==e?e:o.getRandom(-1,1);for(var i=0;i<o.getRandom(1,1e3);i++){var a=n+i*this.directionX,c=r+i*this.directionY;this.path.push({x:a,y:c})}},e.prototype._getPath=function(){var t=this.screen.getBorders();0==this.path.length&&this._createPath(!1,!1);var e=this.path.shift(),n=!1,r=!1;return e.x<t.left&&(n=o.getRandom(0,1)),e.x+this.helperCanvas.width>t.right&&(n=o.getRandom(-1,0)),e.y<t.top&&(r=o.getRandom(0,1)),e.y+this.helperCanvas.height>t.bottom&&(r=o.getRandom(-1,0)),!1===n&&!1===r||(this.path=[],this._createPath(n,r),e=this.path.shift()),e},e.prototype.tick=function(){t.prototype.tick.call(this);var e=!1;this._tickCounter%10==0&&(e=!0,this.currentSpritePos++),this.exploding?this.currentSpritePos>=5&&(this.currentSpritePos=0):this.currentSpritePos>=4&&(this.currentSpritePos=0),e&&this._drawChicken()},e.prototype._drawChicken=function(){var t;t=this.directionX>=0?this.sprites.right[this.currentSpritePos]:this.sprites.left[this.currentSpritePos],this.exploding&&(t=this.sprites.explosion[this.currentSpritePos]),this.helperContext.clearRect(0,0,this.helperCanvas.width,this.helperCanvas.height),this.helperContext.drawImage(this.sprite,-1*t[0],-1*t[1])},e.prototype.explode=function(){this.currentSpritePos=0,this.exploding=!0},e.prototype.isExploding=function(){return this.exploding},e.prototype.get=function(){var t=this.helperCanvas,e=this._getPath();return this.exploding||(this.currentPathX=e.x,this.currentPathY=e.y),(!this.exploding||4!=this.currentSpritePos)&&{img:t,x:this.currentPathX,y:this.currentPathY,width:this.helperCanvas.width,height:this.helperCanvas.height}},e}(a);var p=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const l=function(t){function e(e){var n=t.call(this)||this;n.chickens=[];var r=n;return r.canvas=document.createElement("canvas"),r.canvas.width=e.clientWidth,r.canvas.height=e.clientHeight,r.context=r.canvas.getContext("2d"),r.canvas.addEventListener("mousedown",(function(t){return r.hunt(t)})),r.screenDestEl=e,r.screenDestEl.appendChild(r.get()),window.addEventListener("resize",o.debounce((function(){r.canvas.width=r.screenDestEl.clientWidth,r.canvas.height=r.screenDestEl.clientHeight}))),n}return p(e,t),e.prototype.clear=function(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)},e.prototype.insert=function(t){this.chickens.push(t)},e.prototype.tick=function(){for(var t=[],e=0;e<this.chickens.length;e++){var n=this.chickens[e];n.tick();var r=n.get();!1!==r?this.context.drawImage(r.img,r.x,r.y):t.push(e)}this.chickens=this.chickens.filter((function(e,n){return-1==t.indexOf(n)}))},e.prototype.getBorders=function(){return{top:0,left:0,bottom:this.canvas.height,right:this.canvas.width}},e.prototype.get=function(){return this.canvas},e.prototype.hunt=function(t){for(var e=t.pageX,n=t.pageY,r=0;r<this.chickens.length;r++){var i=this.chickens[r],o=i.get();if(o){var a=!1,c=!1;if(o.x<e&&o.x+o.width>e&&(a=!0),o.y<n&&o.y+o.height>n&&(c=!0),a&&c&&!i.isExploding()){i.explode();break}}}},e}(a);var d;function f(){setTimeout((function(){requestAnimationFrame(f),d.clear(),d.tick()}),1e3/i.fps)}window.addEventListener("load",(function(){d=new l(document.body),function(t){for(var e=0;e<10;e++)d.insert(new u({width:31,height:31,screen:d}))}(),f()}),!1)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,