!function(){var t=400,e=400,i=31,n=null,o=null,a=[],h=function(t,e){return Math.floor(Math.random()*(e-t+1)+t)};function r(){setTimeout((function(){requestAnimationFrame(r),l()}),1e3/30)}var p=function(t){for(var e=0;e<a.length;e++){var n=!1,o=!1;if(t.layerX>=a[e].left&&t.layerX<=a[e].left+i&&(n=!0),t.layerY>=a[e].top&&t.layerY<=a[e].top+i&&(o=!0),n&&o){a[e].explode();break}}},s=function(){function t(t){this._frame=0,this._move=!1,this._upDown=0,this._explode=!1,this._explodeCallback=null,this._explosionPhase=0,this._that={};var e=this;e._that={remove:!1,top:t.top,left:t.left,anger:t.anger||0,movement:null==t.movement||t.movement,spriteDirection:t.spriteDirection||0,spriteMove:null==t.spriteMove||t.spriteMove,spriteIndex:t.spriteIndex||0,explode:function(t){0===e._explosionPhase&&(e._that.spriteDirection=4,e._that.movement=!1,e._that.spriteMove=!0,e._that.anger=25,e._that.spriteIndex=0,e._explosionPhase++,e._explode=!0,e._explodeCallback=t)},render:function(){if(e._frame++,e._frame+e._that.anger>30&&e._that.spriteMove&&(e._frame=0,e._that.spriteIndex++,!0===e._explode&&(e._explosionPhase++,e._explosionPhase>=t.sprites[4].length&&(e._that.remove=!0)),e._that.movement)){h(10*e._that.anger/2,600)>500&&(e._that.spriteDirection=1===e._that.spriteDirection?0:1);var o=h(10*e._that.anger,600),a=h(10*e._that.anger/2,600),r=h(0,500);o>300&&(r>250?(0===e._that.spriteDirection?e._that.left=e._that.left+5:e._that.left=e._that.left-5,e._that.left<0&&(e._that.left=0),e._that.left+i>n.width&&(e._that.left=n.width-i)):(a>500&&(e._upDown=0===e._upDown?1:0),0===e._upDown?e._that.top=e._that.top+5:e._that.top=e._that.top-5,e._that.top<0&&(e._that.top=0),e._that.top+i>=n.height&&(e._that.top=n.height-i)))}e._that.spriteIndex>=t.sprites[e._that.spriteDirection].length&&(e._that.spriteIndex=0),t.context.drawImage(t.image,t.sprites[e._that.spriteDirection][e._that.spriteIndex][0],t.sprites[e._that.spriteDirection][e._that.spriteIndex][1],t.width,t.height,e._that.left,e._that.top,t.width,t.height)}}}return t.prototype.getSprite=function(){return this._that},t}(),_=function(){var t=document.getElementById("chicken");a.push(new s({context:o,image:t,width:i,top:h(30,.75*n.height),left:h(30,.75*n.width),anger:h(20,30),height:i,sprites:[[[66,22],[98,22],[130,24],[162,24]],[[64,90],[96,89],[128,88],[160,88]],[],[],[[240,22],[205,22],[23,87],[23,56],[23,20]]]}).getSprite())},l=function(){o.clearRect(0,0,n.width,n.height);for(var t=a.length-1;t>=0;t--)!1===a[t].remove?a[t].render():(a.splice(t,1),_())};window.addEventListener("load",(function(){console.log("init"),t=document.body.offsetWidth,e=document.body.offsetHeight,console.log(e),(n=document.createElement("canvas")).height=e,n.width=t,n.addEventListener("mousedown",p,!1),document.body.appendChild(n),o=n.getContext("2d"),r(),_(),_(),_(),_(),_(),_(),_(),_(),_()}),!1)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,