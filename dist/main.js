(()=>{"use strict";const t=new function(){this.fps=60},e=function(){function t(){}return t.getRandom=function(t,e){return Math.floor(Math.random()*(e-t+1)+t)},t}(),n=function(){function e(){this._tickCounter=1,e._viewCounter++,this._viewId=e._viewCounter.toString()}return e.prototype.tick=function(){this._tickCounter++,this._tickCounter>t.fps&&(this._tickCounter=1)},e._viewCounter=0,e}();var i,r=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const o=function(t){function n(n){var i=t.call(this)||this;i.sprite=document.getElementById("chicken"),i.helperCanvas=document.createElement("canvas"),i.sprites={right:[[66,22],[98,22],[130,24],[162,24]],left:[[64,90],[96,89],[128,88],[160,88]],explosion:[[240,22],[205,22],[23,87],[23,56],[23,20]]},i.path=[],i.exploding=!1,i.helperCanvas.width=n.width,i.helperCanvas.height=n.height,i.screen=n.screen,i.helperContext=i.helperCanvas.getContext("2d"),i.currentSpritePos=0;var r=i.screen.getBorders();return i.currentPathX=e.getRandom(0,r.right-i.helperCanvas.width),i.currentPathY=e.getRandom(0,r.bottom-i.helperCanvas.height),i._drawChicken(),i}return r(n,t),n.prototype._createPath=function(t,n){var i=this.currentPathX,r=this.currentPathY;this.directionX=!1!==t?t:e.getRandom(-1,1),this.directionY=!1!==n?n:e.getRandom(-1,1);for(var o=0;o<e.getRandom(1,1e3);o++){var h=i+o*this.directionX,s=r+o*this.directionY;this.path.push({x:h,y:s})}},n.prototype._getPath=function(){var t=this.screen.getBorders();0==this.path.length&&this._createPath(!1,!1);var n=this.path.shift(),i=!1,r=!1;return n.x<t.left&&(i=e.getRandom(0,1)),n.x+this.helperCanvas.width>t.right&&(i=e.getRandom(-1,0)),n.y<t.top&&(r=e.getRandom(0,1)),n.y+this.helperCanvas.height>t.bottom&&(r=e.getRandom(-1,0)),!1===i&&!1===r||(this.path=[],this._createPath(i,r),n=this.path.shift()),n},n.prototype.tick=function(){t.prototype.tick.call(this);var e=!1;this._tickCounter%10==0&&(e=!0,this.currentSpritePos++),this.exploding?this.currentSpritePos>=5&&(this.currentSpritePos=0):this.currentSpritePos>=4&&(this.currentSpritePos=0),e&&this._drawChicken()},n.prototype._drawChicken=function(){var t;t=this.directionX>=0?this.sprites.right[this.currentSpritePos]:this.sprites.left[this.currentSpritePos],this.exploding&&(t=this.sprites.explosion[this.currentSpritePos]),this.helperContext.clearRect(0,0,this.helperCanvas.width,this.helperCanvas.height),this.helperContext.drawImage(this.sprite,-1*t[0],-1*t[1])},n.prototype.explode=function(){this.currentSpritePos=0,this.exploding=!0},n.prototype.get=function(){var t=this.helperCanvas,e=this._getPath();return this.exploding||(this.currentPathX=e.x,this.currentPathY=e.y),(!this.exploding||4!=this.currentSpritePos)&&{img:t,x:this.currentPathX,y:this.currentPathY,width:this.helperCanvas.width,height:this.helperCanvas.height}},n}(n);var h=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();const s=function(t){function e(e,n,i){var r=t.call(this)||this;return r.chickens=[],r.canvas=document.createElement("canvas"),r.canvas.height=e,r.canvas.width=n,r.context=r.canvas.getContext("2d"),r.canvas.addEventListener("mousedown",(function(t){return r.hunt(t)})),i.appendChild(r.get()),r}return h(e,t),e.prototype.clear=function(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)},e.prototype.insert=function(t){this.chickens.push(t)},e.prototype.tick=function(){for(var t=[],e=0;e<this.chickens.length;e++){var n=this.chickens[e];n.tick();var i=n.get();!1!==i?this.context.drawImage(i.img,i.x,i.y):t.push(e)}this.chickens=this.chickens.filter((function(e,n){return-1==t.indexOf(n)}))},e.prototype.getBorders=function(){return{top:0,left:0,bottom:this.canvas.height,right:this.canvas.width}},e.prototype.get=function(){return this.canvas},e.prototype.hunt=function(t){for(var e=t.pageX,n=t.pageY,i=0;i<this.chickens.length;i++){var r=this.chickens[i],o=r.get();if(o){var h=!1,s=!1;if(o.x<e&&o.x+o.width>e&&(h=!0),o.y<n&&o.y+o.height>n&&(s=!0),h&&s){r.explode();break}}}},e}(n);var c;function a(){setTimeout((function(){requestAnimationFrame(a),c.clear(),c.tick()}),1e3/t.fps)}window.addEventListener("load",(function(){c=new s(500,500,document.body),function(t){for(var e=0;e<10;e++)c.insert(new o({width:31,height:31,screen:c}))}(),a()}),!1)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,