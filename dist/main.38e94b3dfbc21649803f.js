(()=>{"use strict";var t={937:(t,e,r)=>{t.exports=r.p+"86ec21ec2ad0c08d08b5.png"}},e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={exports:{}};return t[n](i,i.exports,r),i.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var t;r.g.importScripts&&(t=r.g.location+"");var e=r.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=t})(),(()=>{const t=new function(){this.fps=60},e=function(){function t(){}return t.getRandom=function(t,e){return Math.floor(Math.random()*(e-t+1)+t)},t}(),n=function(){function e(){this._tickCounter=1,e._viewCounter++,this._viewId=e._viewCounter.toString()}return e.prototype.tick=function(){this._tickCounter++,this._tickCounter>t.fps&&(this._tickCounter=1)},e._viewCounter=0,e}();var i,o=r(937),h=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});const s=function(t){function r(r){var n=t.call(this)||this;n.sprite=new Image,n.helperCanvas=document.createElement("canvas"),n.sprites={right:[[66,22],[98,22],[130,24],[162,24]],left:[[64,90],[96,89],[128,88],[160,88]],explosion:[[240,22],[205,22],[23,87],[23,56],[23,20]]},n.path=[],n.exploding=!1,n.helperCanvas.width=r.width,n.helperCanvas.height=r.height,n.screen=r.screen,n.helperContext=n.helperCanvas.getContext("2d"),n.currentSpritePos=0;var i=n.screen.getBorders();return n.currentPathX=e.getRandom(0,i.right-n.helperCanvas.width),n.currentPathY=e.getRandom(0,i.bottom-n.helperCanvas.height),n.sprite.src=o,n._drawChicken(),n}return h(r,t),r.prototype._createPath=function(t,r){var n=this.currentPathX,i=this.currentPathY;this.directionX=!1!==t?t:e.getRandom(-1,1),this.directionY=!1!==r?r:e.getRandom(-1,1);for(var o=0;o<e.getRandom(1,1e3);o++){var h=n+o*this.directionX,s=i+o*this.directionY;this.path.push({x:h,y:s})}},r.prototype._getPath=function(){var t=this.screen.getBorders();0==this.path.length&&this._createPath(!1,!1);var r=this.path.shift(),n=!1,i=!1;return r.x<t.left&&(n=e.getRandom(0,1)),r.x+this.helperCanvas.width>t.right&&(n=e.getRandom(-1,0)),r.y<t.top&&(i=e.getRandom(0,1)),r.y+this.helperCanvas.height>t.bottom&&(i=e.getRandom(-1,0)),!1===n&&!1===i||(this.path=[],this._createPath(n,i),r=this.path.shift()),r},r.prototype.tick=function(){t.prototype.tick.call(this);var e=!1;this._tickCounter%10==0&&(e=!0,this.currentSpritePos++),this.exploding?this.currentSpritePos>=5&&(this.currentSpritePos=0):this.currentSpritePos>=4&&(this.currentSpritePos=0),e&&this._drawChicken()},r.prototype._drawChicken=function(){var t;t=this.directionX>=0?this.sprites.right[this.currentSpritePos]:this.sprites.left[this.currentSpritePos],this.exploding&&(t=this.sprites.explosion[this.currentSpritePos]),this.helperContext.clearRect(0,0,this.helperCanvas.width,this.helperCanvas.height),this.helperContext.drawImage(this.sprite,-1*t[0],-1*t[1])},r.prototype.explode=function(){this.currentSpritePos=0,this.exploding=!0},r.prototype.get=function(){var t=this.helperCanvas,e=this._getPath();return this.exploding||(this.currentPathX=e.x,this.currentPathY=e.y),(!this.exploding||4!=this.currentSpritePos)&&{img:t,x:this.currentPathX,y:this.currentPathY,width:this.helperCanvas.width,height:this.helperCanvas.height}},r}(n);var c=function(){var t=function(e,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(e,r)};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const a=function(t){function e(e,r,n){var i=t.call(this)||this;return i.chickens=[],i.canvas=document.createElement("canvas"),i.canvas.height=e,i.canvas.width=r,i.context=i.canvas.getContext("2d"),i.canvas.addEventListener("mousedown",(function(t){return i.hunt(t)})),n.appendChild(i.get()),i}return c(e,t),e.prototype.clear=function(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)},e.prototype.insert=function(t){this.chickens.push(t)},e.prototype.tick=function(){for(var t=[],e=0;e<this.chickens.length;e++){var r=this.chickens[e];r.tick();var n=r.get();!1!==n?this.context.drawImage(n.img,n.x,n.y):t.push(e)}this.chickens=this.chickens.filter((function(e,r){return-1==t.indexOf(r)}))},e.prototype.getBorders=function(){return{top:0,left:0,bottom:this.canvas.height,right:this.canvas.width}},e.prototype.get=function(){return this.canvas},e.prototype.hunt=function(t){for(var e=t.pageX,r=t.pageY,n=0;n<this.chickens.length;n++){var i=this.chickens[n],o=i.get();if(o){var h=!1,s=!1;if(o.x<e&&o.x+o.width>e&&(h=!0),o.y<r&&o.y+o.height>r&&(s=!0),h&&s){i.explode();break}}}},e}(n);var p;function u(){setTimeout((function(){requestAnimationFrame(u),p.clear(),p.tick()}),1e3/t.fps)}window.addEventListener("load",(function(){p=new a(500,500,document.body),function(t){for(var e=0;e<10;e++)p.insert(new s({width:31,height:31,screen:p}))}(),u()}),!1)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leHBsb2RpbmctY2hpY2tlbi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9leHBsb2RpbmctY2hpY2tlbi93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2V4cGxvZGluZy1jaGlja2VuL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2V4cGxvZGluZy1jaGlja2VuLy4vc3JjL3RzL2NmZy9jZmcudHMiLCJ3ZWJwYWNrOi8vZXhwbG9kaW5nLWNoaWNrZW4vLi9zcmMvdHMvdXRpbHMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vZXhwbG9kaW5nLWNoaWNrZW4vLi9zcmMvdHMvdmlldy9hYnN0cmFjdFZpZXcudHMiLCJ3ZWJwYWNrOi8vZXhwbG9kaW5nLWNoaWNrZW4vLi9zcmMvdHMvdmlldy9jaGlja2VuLnRzIiwid2VicGFjazovL2V4cGxvZGluZy1jaGlja2VuLy4vc3JjL3RzL3ZpZXcvc2NyZWVuLnRzIiwid2VicGFjazovL2V4cGxvZGluZy1jaGlja2VuLy4vc3JjL3RzL21haW4udHMiXSwibmFtZXMiOlsiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnIiwiZ2xvYmFsVGhpcyIsInRoaXMiLCJGdW5jdGlvbiIsImUiLCJ3aW5kb3ciLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJkb2N1bWVudCIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJsZW5ndGgiLCJFcnJvciIsInJlcGxhY2UiLCJwIiwiZnBzIiwiVXRpbHMiLCJnZXRSYW5kb20iLCJtaW4iLCJtYXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJhYnN0cmFjdFZpZXciLCJfdGlja0NvdW50ZXIiLCJfdmlld0NvdW50ZXIiLCJfdmlld0lkIiwidG9TdHJpbmciLCJwcm90b3R5cGUiLCJ0aWNrIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsImQiLCJiIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9fIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJfc3VwZXIiLCJjaGlja2VuIiwicENvbmZpZyIsIl90aGlzIiwic3ByaXRlIiwiSW1hZ2UiLCJoZWxwZXJDYW52YXMiLCJjcmVhdGVFbGVtZW50Iiwic3ByaXRlcyIsInJpZ2h0IiwibGVmdCIsImV4cGxvc2lvbiIsInBhdGgiLCJleHBsb2RpbmciLCJ3aWR0aCIsImhlaWdodCIsInNjcmVlbiIsImhlbHBlckNvbnRleHQiLCJnZXRDb250ZXh0IiwiY3VycmVudFNwcml0ZVBvcyIsIl9ib3JkZXJzIiwiZ2V0Qm9yZGVycyIsImN1cnJlbnRQYXRoWCIsImN1cnJlbnRQYXRoWSIsImJvdHRvbSIsIl9kcmF3Q2hpY2tlbiIsIl9jcmVhdGVQYXRoIiwicEZvcmNlRGlyZWN0aW9uWCIsInBGb3JjZURpcmVjdGlvblkiLCJfcG9zU3RhcnRYIiwiX3Bvc1N0YXJ0WSIsImRpcmVjdGlvblgiLCJkaXJlY3Rpb25ZIiwiX2kiLCJfbmV4dFgiLCJfbmV4dFkiLCJwdXNoIiwieCIsInkiLCJfZ2V0UGF0aCIsIl9uZXh0U3RlcCIsInNoaWZ0IiwiX2ZvcmNlWCIsIl9mb3JjZVkiLCJ0b3AiLCJfZHJhdyIsIl9zcHJpdGUiLCJjbGVhclJlY3QiLCJkcmF3SW1hZ2UiLCJleHBsb2RlIiwiZ2V0IiwiX2NoaWNrZW4iLCJfcGF0aCIsImltZyIsIlNjcmVlbiIsInBXaWR0aCIsInBIZWlnaHQiLCJwU2NyZWVuRGVzdCIsImNoaWNrZW5zIiwiY2FudmFzIiwiY29udGV4dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJodW50IiwiYXBwZW5kQ2hpbGQiLCJjbGVhciIsImluc2VydCIsInBDaGlja2VuIiwiX2NoaWNrZW5zVG9SZW1vdmUiLCJfY2hpY2tlbkNmZyIsImZpbHRlciIsInZhbHVlIiwiaW5kZXgiLCJpbmRleE9mIiwicEV2ZW50IiwiX3Bvc1giLCJwYWdlWCIsIl9wb3NZIiwicGFnZVkiLCJfaG9yaXpvbnRhbE1hdGNoIiwiX3ZlcnRpY2FsTWF0Y2giLCJsb29wIiwic2V0VGltZW91dCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImJvZHkiLCJwQW1vdW50Iiwic3Bhd25DaGlja2VuIl0sIm1hcHBpbmdzIjoibUZBQ0lBLEVBQTJCLEdBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixHQUFHRixFQUF5QkUsR0FDM0IsT0FBT0YsRUFBeUJFLEdBQVVDLFFBRzNDLElBQUlDLEVBQVNKLEVBQXlCRSxHQUFZLENBR2pEQyxRQUFTLElBT1YsT0FIQUUsRUFBb0JILEdBQVVFLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9DRyxFQUFPRCxRQ3BCZkYsRUFBb0JLLEVBQUksV0FDdkIsR0FBMEIsaUJBQWZDLFdBQXlCLE9BQU9BLFdBQzNDLElBQ0MsT0FBT0MsTUFBUSxJQUFJQyxTQUFTLGNBQWIsR0FDZCxNQUFPQyxHQUNSLEdBQXNCLGlCQUFYQyxPQUFxQixPQUFPQSxRQUxqQixHLE1DQXhCLElBQUlDLEVBQ0FYLEVBQW9CSyxFQUFFTyxnQkFBZUQsRUFBWVgsRUFBb0JLLEVBQUVRLFNBQVcsSUFDdEYsSUFBSUMsRUFBV2QsRUFBb0JLLEVBQUVTLFNBQ3JDLElBQUtILEdBQWFHLElBQ2JBLEVBQVNDLGdCQUNaSixFQUFZRyxFQUFTQyxjQUFjQyxNQUMvQkwsR0FBVyxDQUNmLElBQUlNLEVBQVVILEVBQVNJLHFCQUFxQixVQUN6Q0QsRUFBUUUsU0FBUVIsRUFBWU0sRUFBUUEsRUFBUUUsT0FBUyxHQUFHSCxLQUs3RCxJQUFLTCxFQUFXLE1BQU0sSUFBSVMsTUFBTSx5REFDaENULEVBQVlBLEVBQVVVLFFBQVEsT0FBUSxJQUFJQSxRQUFRLFFBQVMsSUFBSUEsUUFBUSxZQUFhLEtBQ3BGckIsRUFBb0JzQixFQUFJWCxHLFNDZHhC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QUFPLElBQUssSUFBS2xHLFNBQVN3SCxNQUkzQyxTQUFzQkMsR0FDbEIsSUFBSyxJQUFJbkQsRUFBSyxFQUFHQSxFQUpKLEdBSWtCQSxJQUMzQixFQUFPZ0MsT0FBTyxJQUFJLEVBQVEsQ0FDdEJuRCxNQVZLLEdBV0xDLE9BWEssR0FZTEMsT0FBUSxLQVJoQnFFLEdBQ0FMLE9Ba0JrQyxJIiwiZmlsZSI6Im1haW4uYTBjZjYxOWEyODEzMTQzY2ZiMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCIvLyB0b2RvOiBwcm9wZXIgc2luZ2xldG9uP1xyXG5leHBvcnQgZGVmYXVsdCBuZXcgLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gY2ZnKCkge1xyXG4gICAgICAgIHRoaXMuZnBzID0gNjA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2ZnO1xyXG59KCkpO1xyXG4iLCJ2YXIgVXRpbHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBVdGlscygpIHtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogZ2VuZXJhdGUgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gbWluIGFuZCBtYXhcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbWluXHJcbiAgICAgKiBAcGFyYW0gbWF4XHJcbiAgICAgKi9cclxuICAgIFV0aWxzLmdldFJhbmRvbSA9IGZ1bmN0aW9uIChtaW4sIG1heCkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkgKyBtaW4pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBVdGlscztcclxufSgpKTtcclxuZXhwb3J0IGRlZmF1bHQgVXRpbHM7XHJcbiIsImltcG9ydCBDZmcgZnJvbSAnLi4vY2ZnL2NmZyc7XHJcbnZhciBhYnN0cmFjdFZpZXcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBhYnN0cmFjdFZpZXcoKSB7XHJcbiAgICAgICAgdGhpcy5fdGlja0NvdW50ZXIgPSAxO1xyXG4gICAgICAgIGFic3RyYWN0Vmlldy5fdmlld0NvdW50ZXIrKztcclxuICAgICAgICB0aGlzLl92aWV3SWQgPSBhYnN0cmFjdFZpZXcuX3ZpZXdDb3VudGVyLnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGZyYW1lIGRyYXcgdXBkYXRlXHJcbiAgICAgKi9cclxuICAgIGFic3RyYWN0Vmlldy5wcm90b3R5cGUudGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl90aWNrQ291bnRlcisrO1xyXG4gICAgICAgIGlmICh0aGlzLl90aWNrQ291bnRlciA+IENmZy5mcHMpIHtcclxuICAgICAgICAgICAgdGhpcy5fdGlja0NvdW50ZXIgPSAxO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBhYnN0cmFjdFZpZXcuX3ZpZXdDb3VudGVyID0gMDtcclxuICAgIHJldHVybiBhYnN0cmFjdFZpZXc7XHJcbn0oKSk7XHJcbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0VmlldztcclxuIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IEFic3RyYWN0VmlldyBmcm9tICcuL2Fic3RyYWN0Vmlldyc7XHJcbmltcG9ydCBjaGlja2VuUG5nU3JjIGZyb20gJy4vLi4vLi4vYXNzZXRzL2ltYWdlcy9jaGlja2VuMi5wbmcnO1xyXG52YXIgY2hpY2tlbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhjaGlja2VuLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gY2hpY2tlbihwQ29uZmlnKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5zcHJpdGUgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICAvLyBzcHJpdGUuc3JjID0gY2hpY2tlblBuZ1NyYztcclxuICAgICAgICBfdGhpcy5oZWxwZXJDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgICBfdGhpcy5zcHJpdGVzID0ge1xyXG4gICAgICAgICAgICByaWdodDogW1xyXG4gICAgICAgICAgICAgICAgWzY2LCAyMl0sXHJcbiAgICAgICAgICAgICAgICBbOTgsIDIyXSxcclxuICAgICAgICAgICAgICAgIFsxMzAsIDI0XSxcclxuICAgICAgICAgICAgICAgIFsxNjIsIDI0XVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBsZWZ0OiBbXHJcbiAgICAgICAgICAgICAgICBbNjQsIDkwXSxcclxuICAgICAgICAgICAgICAgIFs5NiwgODldLFxyXG4gICAgICAgICAgICAgICAgWzEyOCwgODhdLFxyXG4gICAgICAgICAgICAgICAgWzE2MCwgODhdXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIGV4cGxvc2lvbjogW1xyXG4gICAgICAgICAgICAgICAgWzI0MCwgMjJdLFxyXG4gICAgICAgICAgICAgICAgWzIwNSwgMjJdLFxyXG4gICAgICAgICAgICAgICAgWzIzLCA4N10sXHJcbiAgICAgICAgICAgICAgICBbMjMsIDU2XSxcclxuICAgICAgICAgICAgICAgIFsyMywgMjBdXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9O1xyXG4gICAgICAgIF90aGlzLnBhdGggPSBbXTtcclxuICAgICAgICBfdGhpcy5leHBsb2RpbmcgPSBmYWxzZTtcclxuICAgICAgICBfdGhpcy5oZWxwZXJDYW52YXMud2lkdGggPSBwQ29uZmlnLndpZHRoO1xyXG4gICAgICAgIF90aGlzLmhlbHBlckNhbnZhcy5oZWlnaHQgPSBwQ29uZmlnLmhlaWdodDtcclxuICAgICAgICBfdGhpcy5zY3JlZW4gPSBwQ29uZmlnLnNjcmVlbjtcclxuICAgICAgICBfdGhpcy5oZWxwZXJDb250ZXh0ID0gX3RoaXMuaGVscGVyQ2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgICAgX3RoaXMuY3VycmVudFNwcml0ZVBvcyA9IDA7XHJcbiAgICAgICAgdmFyIF9ib3JkZXJzID0gX3RoaXMuc2NyZWVuLmdldEJvcmRlcnMoKTtcclxuICAgICAgICBfdGhpcy5jdXJyZW50UGF0aFggPSBVdGlscy5nZXRSYW5kb20oMCwgX2JvcmRlcnMucmlnaHQgLSBfdGhpcy5oZWxwZXJDYW52YXMud2lkdGgpO1xyXG4gICAgICAgIF90aGlzLmN1cnJlbnRQYXRoWSA9IFV0aWxzLmdldFJhbmRvbSgwLCBfYm9yZGVycy5ib3R0b20gLSBfdGhpcy5oZWxwZXJDYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICBfdGhpcy5zcHJpdGUuc3JjID0gY2hpY2tlblBuZ1NyYztcclxuICAgICAgICBfdGhpcy5fZHJhd0NoaWNrZW4oKTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGdlbmVyYXRlIHRoZSByb3V0ZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwRm9yY2VEaXJlY3Rpb25YIDF8MHwtMXxmYWxzZVxyXG4gICAgICogQHBhcmFtIHBGb3JjZURpcmVjdGlvblkgMXwwfC0xfGZhbHNlXHJcbiAgICAgKi9cclxuICAgIGNoaWNrZW4ucHJvdG90eXBlLl9jcmVhdGVQYXRoID0gZnVuY3Rpb24gKHBGb3JjZURpcmVjdGlvblgsIHBGb3JjZURpcmVjdGlvblkpIHtcclxuICAgICAgICB2YXIgX3Bvc1N0YXJ0WCA9IHRoaXMuY3VycmVudFBhdGhYLCBfcG9zU3RhcnRZID0gdGhpcy5jdXJyZW50UGF0aFk7XHJcbiAgICAgICAgdGhpcy5kaXJlY3Rpb25YID0gKHBGb3JjZURpcmVjdGlvblggIT09IGZhbHNlKSA/IHBGb3JjZURpcmVjdGlvblggOiBVdGlscy5nZXRSYW5kb20oLTEsIDEpO1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aW9uWSA9IChwRm9yY2VEaXJlY3Rpb25ZICE9PSBmYWxzZSkgPyBwRm9yY2VEaXJlY3Rpb25ZIDogVXRpbHMuZ2V0UmFuZG9tKC0xLCAxKTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgVXRpbHMuZ2V0UmFuZG9tKDEsIDEwMDApOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBfbmV4dFggPSBfcG9zU3RhcnRYICsgKF9pICogdGhpcy5kaXJlY3Rpb25YKSwgX25leHRZID0gX3Bvc1N0YXJ0WSArIChfaSAqIHRoaXMuZGlyZWN0aW9uWSk7XHJcbiAgICAgICAgICAgIHRoaXMucGF0aC5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHg6IF9uZXh0WCxcclxuICAgICAgICAgICAgICAgIHk6IF9uZXh0WSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogZ2V0IG5leHQgcGF0aCBzdGVwXHJcbiAgICAgKlxyXG4gICAgICogY2hlY2sgaWYgdGhlIHN0ZXAgaXMgcG9zc2libGVcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtzdGVwfVxyXG4gICAgICovXHJcbiAgICBjaGlja2VuLnByb3RvdHlwZS5fZ2V0UGF0aCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX2JvcmRlcnMgPSB0aGlzLnNjcmVlbi5nZXRCb3JkZXJzKCk7XHJcbiAgICAgICAgaWYgKHRoaXMucGF0aC5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVQYXRoKGZhbHNlLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBfbmV4dFN0ZXAgPSB0aGlzLnBhdGguc2hpZnQoKTtcclxuICAgICAgICB2YXIgX2ZvcmNlWCA9IGZhbHNlLCBfZm9yY2VZID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKF9uZXh0U3RlcC54IDwgX2JvcmRlcnMubGVmdCkge1xyXG4gICAgICAgICAgICBfZm9yY2VYID0gVXRpbHMuZ2V0UmFuZG9tKDAsIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoX25leHRTdGVwLnggKyB0aGlzLmhlbHBlckNhbnZhcy53aWR0aCA+IF9ib3JkZXJzLnJpZ2h0KSB7XHJcbiAgICAgICAgICAgIF9mb3JjZVggPSBVdGlscy5nZXRSYW5kb20oLTEsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoX25leHRTdGVwLnkgPCBfYm9yZGVycy50b3ApIHtcclxuICAgICAgICAgICAgX2ZvcmNlWSA9IFV0aWxzLmdldFJhbmRvbSgwLCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKF9uZXh0U3RlcC55ICsgdGhpcy5oZWxwZXJDYW52YXMuaGVpZ2h0ID4gX2JvcmRlcnMuYm90dG9tKSB7XHJcbiAgICAgICAgICAgIF9mb3JjZVkgPSBVdGlscy5nZXRSYW5kb20oLTEsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoX2ZvcmNlWCAhPT0gZmFsc2UgfHwgX2ZvcmNlWSAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXRoID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZVBhdGgoX2ZvcmNlWCwgX2ZvcmNlWSk7XHJcbiAgICAgICAgICAgIF9uZXh0U3RlcCA9IHRoaXMucGF0aC5zaGlmdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gX25leHRTdGVwO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogZnJhbWUgc3RlcFxyXG4gICAgICovXHJcbiAgICBjaGlja2VuLnByb3RvdHlwZS50aWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUudGljay5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHZhciBfZHJhdyA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLl90aWNrQ291bnRlciAlIDEwID09IDApIHtcclxuICAgICAgICAgICAgX2RyYXcgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTcHJpdGVQb3MrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmV4cGxvZGluZykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50U3ByaXRlUG9zID49IDQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFNwcml0ZVBvcyA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRTcHJpdGVQb3MgPj0gNSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50U3ByaXRlUG9zID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoX2RyYXcpIHtcclxuICAgICAgICAgICAgdGhpcy5fZHJhd0NoaWNrZW4oKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBkcmF3IHRoZSBjaGlja2VuIHRvIHRoZSBoZWxwZXJcclxuICAgICAqL1xyXG4gICAgY2hpY2tlbi5wcm90b3R5cGUuX2RyYXdDaGlja2VuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfc3ByaXRlO1xyXG4gICAgICAgIGlmICh0aGlzLmRpcmVjdGlvblggPj0gMCkge1xyXG4gICAgICAgICAgICBfc3ByaXRlID0gdGhpcy5zcHJpdGVzLnJpZ2h0W3RoaXMuY3VycmVudFNwcml0ZVBvc107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBfc3ByaXRlID0gdGhpcy5zcHJpdGVzLmxlZnRbdGhpcy5jdXJyZW50U3ByaXRlUG9zXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZXhwbG9kaW5nKSB7XHJcbiAgICAgICAgICAgIF9zcHJpdGUgPSB0aGlzLnNwcml0ZXMuZXhwbG9zaW9uW3RoaXMuY3VycmVudFNwcml0ZVBvc107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaGVscGVyQ29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5oZWxwZXJDYW52YXMud2lkdGgsIHRoaXMuaGVscGVyQ2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5oZWxwZXJDb250ZXh0LmRyYXdJbWFnZSh0aGlzLnNwcml0ZSwgX3Nwcml0ZVswXSAqIC0xLCBfc3ByaXRlWzFdICogLTEpO1xyXG4gICAgfTtcclxuICAgIGNoaWNrZW4ucHJvdG90eXBlLmV4cGxvZGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50U3ByaXRlUG9zID0gMDtcclxuICAgICAgICB0aGlzLmV4cGxvZGluZyA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgY2hpY2tlbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfY2hpY2tlbiA9IHRoaXMuaGVscGVyQ2FudmFzO1xyXG4gICAgICAgIHZhciBfcGF0aCA9IHRoaXMuX2dldFBhdGgoKTtcclxuICAgICAgICBpZiAoIXRoaXMuZXhwbG9kaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFBhdGhYID0gX3BhdGgueDtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGF0aFkgPSBfcGF0aC55O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5leHBsb2RpbmcgJiYgdGhpcy5jdXJyZW50U3ByaXRlUG9zID09IDQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpbWc6IF9jaGlja2VuLFxyXG4gICAgICAgICAgICB4OiB0aGlzLmN1cnJlbnRQYXRoWCxcclxuICAgICAgICAgICAgeTogdGhpcy5jdXJyZW50UGF0aFksXHJcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLmhlbHBlckNhbnZhcy53aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmhlbHBlckNhbnZhcy5oZWlnaHQsXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gY2hpY2tlbjtcclxufShBYnN0cmFjdFZpZXcpKTtcclxuZXhwb3J0IGRlZmF1bHQgY2hpY2tlbjtcclxuO1xyXG4iLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG5pbXBvcnQgQWJzdHJhY3RWaWV3IGZyb20gJy4vYWJzdHJhY3RWaWV3JztcclxudmFyIFNjcmVlbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhTY3JlZW4sIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBTY3JlZW4ocFdpZHRoLCBwSGVpZ2h0LCBwU2NyZWVuRGVzdCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuY2hpY2tlbnMgPSBbXTtcclxuICAgICAgICBfdGhpcy5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgICBfdGhpcy5jYW52YXMuaGVpZ2h0ID0gcFdpZHRoO1xyXG4gICAgICAgIF90aGlzLmNhbnZhcy53aWR0aCA9IHBIZWlnaHQ7XHJcbiAgICAgICAgX3RoaXMuY29udGV4dCA9IF90aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgICAgIF90aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gX3RoaXMuaHVudChlKTsgfSk7XHJcbiAgICAgICAgcFNjcmVlbkRlc3QuYXBwZW5kQ2hpbGQoX3RoaXMuZ2V0KCkpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogY2xlYXIgc2NyZWVuIGZvciBuZXh0IGRyYXdcclxuICAgICAqL1xyXG4gICAgU2NyZWVuLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogaW5zZXJ0IHRoaW5ncy9jaGlja2VuIHRvIHNjcmVlblxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwQ2hpY2tlbkNmZ1RvSW5zZXJ0XHJcbiAgICAgKi9cclxuICAgIFNjcmVlbi5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24gKHBDaGlja2VuKSB7XHJcbiAgICAgICAgdGhpcy5jaGlja2Vucy5wdXNoKHBDaGlja2VuKTtcclxuICAgIH07XHJcbiAgICBTY3JlZW4ucHJvdG90eXBlLnRpY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF9jaGlja2Vuc1RvUmVtb3ZlID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRoaXMuY2hpY2tlbnMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBfY2hpY2tlbiA9IHRoaXMuY2hpY2tlbnNbX2ldO1xyXG4gICAgICAgICAgICBfY2hpY2tlbi50aWNrKCk7XHJcbiAgICAgICAgICAgIHZhciBfY2hpY2tlbkNmZyA9IF9jaGlja2VuLmdldCgpO1xyXG4gICAgICAgICAgICBpZiAoX2NoaWNrZW5DZmcgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKF9jaGlja2VuQ2ZnLmltZywgX2NoaWNrZW5DZmcueCwgX2NoaWNrZW5DZmcueSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfY2hpY2tlbnNUb1JlbW92ZS5wdXNoKF9pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNoaWNrZW5zID0gdGhpcy5jaGlja2Vucy5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2NoaWNrZW5zVG9SZW1vdmUuaW5kZXhPZihpbmRleCkgPT0gLTE7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBTY3JlZW4ucHJvdG90eXBlLmdldEJvcmRlcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgICBsZWZ0OiAwLFxyXG4gICAgICAgICAgICBib3R0b206IHRoaXMuY2FudmFzLmhlaWdodCxcclxuICAgICAgICAgICAgcmlnaHQ6IHRoaXMuY2FudmFzLndpZHRoXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBTY3JlZW4ucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYW52YXM7XHJcbiAgICB9O1xyXG4gICAgU2NyZWVuLnByb3RvdHlwZS5odW50ID0gZnVuY3Rpb24gKHBFdmVudCkge1xyXG4gICAgICAgIHZhciBfcG9zWCA9IHBFdmVudC5wYWdlWCwgX3Bvc1kgPSBwRXZlbnQucGFnZVk7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRoaXMuY2hpY2tlbnMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBfY2hpY2tlbiA9IHRoaXMuY2hpY2tlbnNbX2ldLCBfY2hpY2tlbkNmZyA9IF9jaGlja2VuLmdldCgpO1xyXG4gICAgICAgICAgICBpZiAoIV9jaGlja2VuQ2ZnKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgX2hvcml6b250YWxNYXRjaCA9IGZhbHNlLCBfdmVydGljYWxNYXRjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoX2NoaWNrZW5DZmcueCA8IF9wb3NYICYmIF9jaGlja2VuQ2ZnLnggKyBfY2hpY2tlbkNmZy53aWR0aCA+IF9wb3NYKSB7XHJcbiAgICAgICAgICAgICAgICBfaG9yaXpvbnRhbE1hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoX2NoaWNrZW5DZmcueSA8IF9wb3NZICYmIF9jaGlja2VuQ2ZnLnkgKyBfY2hpY2tlbkNmZy5oZWlnaHQgPiBfcG9zWSkge1xyXG4gICAgICAgICAgICAgICAgX3ZlcnRpY2FsTWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChfaG9yaXpvbnRhbE1hdGNoICYmIF92ZXJ0aWNhbE1hdGNoKSB7XHJcbiAgICAgICAgICAgICAgICBfY2hpY2tlbi5leHBsb2RlKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gU2NyZWVuO1xyXG59KEFic3RyYWN0VmlldykpO1xyXG5leHBvcnQgZGVmYXVsdCBTY3JlZW47XHJcbiIsImltcG9ydCBDZmcgZnJvbSAnLi9jZmcvY2ZnJztcclxuaW1wb3J0IENoaWNrZW4gZnJvbSAnLi92aWV3L2NoaWNrZW4nO1xyXG5pbXBvcnQgU2NyZWVuIGZyb20gJy4vdmlldy9zY3JlZW4nO1xyXG52YXIgc3ByaXRlU2l6ZSA9IDMxO1xyXG52YXIgc2NyZWVuO1xyXG52YXIgaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHNjcmVlbiA9IG5ldyBTY3JlZW4oNTAwLCA1MDAsIGRvY3VtZW50LmJvZHkpO1xyXG4gICAgc3Bhd25DaGlja2VuKDEwKTtcclxuICAgIGxvb3AoKTtcclxufTtcclxuZnVuY3Rpb24gc3Bhd25DaGlja2VuKHBBbW91bnQpIHtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBwQW1vdW50OyBfaSsrKSB7XHJcbiAgICAgICAgc2NyZWVuLmluc2VydChuZXcgQ2hpY2tlbih7XHJcbiAgICAgICAgICAgIHdpZHRoOiBzcHJpdGVTaXplLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IHNwcml0ZVNpemUsXHJcbiAgICAgICAgICAgIHNjcmVlbjogc2NyZWVuXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGxvb3AoKSB7XHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XHJcbiAgICAgICAgc2NyZWVuLmNsZWFyKCk7XHJcbiAgICAgICAgc2NyZWVuLnRpY2soKTtcclxuICAgIH0sIDEwMDAgLyBDZmcuZnBzKTtcclxufVxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGluaXQsIGZhbHNlKTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==